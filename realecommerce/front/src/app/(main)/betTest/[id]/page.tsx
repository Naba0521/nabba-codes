/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";
import { Button } from "@/components/ui/button";
import { useState, useEffect } from "react";
import clsx from "clsx";
import { request, gql } from "graphql-request";
import { useParams } from "next/navigation";
interface Team {
  name: string;
  image: string;
  players: string[];
}

interface Game {
  id: string;
  teamA: Team;
  teamB: Team;
  isFinished: boolean;
  isStarted: boolean;
}

interface GameResponse {
  getGames: Game[];
}
interface GameOdds {
  oddA: number;
  oddB: number;
}

const endpoint =
  typeof window !== "undefined"
    ? window.location.origin + "/api/graphql"
    : "http://localhost:3000/api/graphql";

const GET_GAMES = gql`
  query GetGames {
    getGames {
      id
      teamA {
        name
        image
        players
      }
      teamB {
        name
        image
        players
      }
      isFinished
      isStarted
    }
  }
`;

const GET_ODDS = gql`
  query GetGameOdds($gameId: ID!) {
    getGameOdds(gameId: $gameId) {
      oddA
      oddB
    }
  }
`;
const CREATE_BET = gql`
  mutation CreateBet($input: CreateBetInput!) {
    createBet(input: $input) {
      id
      username
      game
      team
      amount
    }
  }
`;

export default function Home() {
  const [games, setGames] = useState<any[]>([]);
  const [selectedTeam, setSelectedTeam] = useState<string>("");
  const [selectedBet, setSelectedBet] = useState<number | null>(null);
  const [name, setName] = useState<string>("");
  const allowedNames = [
    "–ë–∏–ª–≥“Ø“Ø–Ω–¥”©–ª",
    "–°–∞–π–Ω–∑–∞—è–∞",
    "–ì–∞–Ω–±–∞—Ç",
    "–ë–∞—Ç-–û—Ä–≥–∏–ª",
    "–ù–∞—Ä–∞–Ω–±–∞–∞—Ç–∞—Ä",
    "–Ø–Ω–∂–∏–Ω–ª—Ö–∞–º",
    "–ó–æ–ª–±–∞—è—Ä",
    "Manlai",
    "–ë–∏–ª–≥“Ø“Ø–Ω",
    "–ó–æ–ª–±–æ–æ /–û–∫—Ç—è–±—Ä—å/",
    "–ì–∞–Ω-–ò–Ω–¥—Ä–∞ /–ë–æ–ª–¥–Ω—è–º/",
    "–ó—É–ª—Å–∞—Ä /–•–∞—Å–∞—Ä—Ö“Ø“Ø/",
    "–ñ–∞–≤—Ö–ª–∞–Ω—Ç”©–≥—Å /–ë–∞—Ç–º–∞–Ω–ª–∞–π/",
    "–≠—Ä–¥—ç–Ω—ç–¥–∞—Ä—å /–ß—É–ª—É—É–Ω–±–∞–∞—Ç–∞—Ä/",
    "–ó–æ–ª–±–æ–æ /–¶–æ–ª–º–æ–Ω–±–∞–∞—Ç–∞—Ä/",
    "–°—É–º—ä—è–∞–±–∞–∑–∞—Ä /–ê–º–∞—Ä–∂–∞—Ä–≥–∞–ª/",
    "–ê—Ä–≤–∏–Ω–±—É—è–Ω /–û—Ç–≥–æ–Ω–∂–∞—Ä–≥–∞–ª/",
    "–õ—Ö–∞–≥–≤–∞—Å“Ø—Ä—ç–Ω /–û—Ä–≥–∏–ª—Å–∞–π—Ö–∞–Ω/",
    "–ë–æ–ª–æ—Ä–º–∞–∞ /–ò—Ö–±–∞—è—Ä/",
    "–ù–∞—Ä–∞–Ω—Ü–∞—Ü—Ä–∞–ª—Ç /–ë—É–º–Ω–∞—Å–∞–Ω/",
    "–ù–æ–º–∏–Ω /–¢—É–Ω–≥–∞–ª–∞–≥—Ç–∞–º–∏—Ä/",
    "–õ—Ö–∞–≥–≤–∞-–≠—Ä–¥—ç–Ω—ç /–ë—è–º–±–∞—Ü–æ–≥—Ç/",
    "–≠–ª–±—ç–≥ /–ê–º–∞—Ä–±–∞—è—Å–≥–∞–ª–∞–Ω/",
    "–¢”©—Ä–±–æ–ª–¥ /–ß–∏–Ω–∑–æ—Ä–∏–≥/",
    "–≠–Ω—ç—Ä—ç–ª /–ë–∞—Ä–∏–∞—à–∏—Ä/",
    "–î–∞—à–Ω—è–º /–ë–∞–∞—Å–∞–Ω/",
    "–î“Ø“Ø—Ä—ç–Ω–±–∏–ª—ç–≥ /–î–∞—Ä—å—Ö“Ø“Ø/",
    "–ê—Ä–∏—É–Ω–±–æ–ª–¥ /–£–ª–∞–º—Å–∞–π—Ö–∞–Ω/",
    "–ë–∞–¥—Ä–∞–ª /–ë–∞–π–≥–∞–ª–º–∞–∞/",
    "–ú–∏—à—ç—ç–ª /–°–æ—ë–ª-–≠—Ä–¥—ç–Ω—ç/",
    "–¢–∞–π–≤–∞–Ω–±–∞—Ç /–ë–æ–ª–¥–±–∞—è—Ä/",
    "–≠–Ω—Ö-–ê–º–∞—Ä /–ë–∞—Ç–Ω–æ—Ä–æ–≤/",
    "–ì—ç—Ä—ç–ª—Ç—É—è–∞ /–ú”©–Ω—Ö–∑–∞—è–∞/",
    "–ú”©–Ω—Ö—Ç—É–Ω–≥–∞–ª–∞–≥ /–ù—è–º–∞–∞/",
    "–ê–º–≥–∞–ª–∞–Ω /–ë–∞—Ç–Ω—è–º—Å“Ø—Ä—ç–Ω/",
    "–¢—ç–º“Ø“Ø–ª—ç–Ω /–ù–∞—Ä–º–∞–Ω–¥–∞—Ö/",
    "Sukhbat",
    "–ú–∞—Ä–∞–ª–º–∞–∞/–î–∞–≤–∞–∞–Ω—è–º/",
    "–¢”©–º”©—Ä—Ö—É—è–≥ /–≠–Ω—Ö–Ω–∞—Å–∞–Ω/",
  ];

  const params = useParams();
  const gamingId = params?.id;
  const fetchData = async () => {
    try {
      const gameRes = (await request(endpoint, GET_GAMES)) as GameResponse;

      const gamesWithOdds = await Promise.all(
        gameRes.getGames.map(async (game: Game) => {
          try {
            const oddsRes = (await request(endpoint, GET_ODDS, {
              gameId: game.id,
            })) as { getGameOdds: GameOdds };

            return {
              ...game,
              oddA: oddsRes.getGameOdds.oddA,
              oddB: oddsRes.getGameOdds.oddB,
            };
          } catch (err) {
            console.warn("Skipping game due to missing odds:", game.id);
            return null;
          }
        })
      );

      setGames(
        gamesWithOdds.filter(Boolean).filter((game) => game?.id === gamingId)
      );
    } catch (error) {
      console.error("Error fetching games or odds:", error);
    }
  };

  useEffect(() => {
    fetchData();

    const interval = setInterval(() => {
      fetchData();
    }, 2000);

    return () => clearInterval(interval);
  }, [gamingId]);

  const selectedTeamObj = games
    .flatMap((game) => [
      { name: game.teamA.name, odd: game.oddA },
      { name: game.teamB.name, odd: game.oddB },
    ])
    .find((team) => team.name === selectedTeam);

  const winniblePrice =
    selectedBet && selectedTeamObj ? selectedBet * selectedTeamObj.odd : null;

  const mockBets = [1000, 3000, 5000, 10000];

  const handleBet = async () => {
    if (!name.trim()) {
      alert("–ù—ç—Ä—ç—ç –æ—Ä—É—É–ª–Ω–∞ —É—É.");
      return;
    }

    if (!selectedTeam || !selectedBet) {
      alert("–ë–∞–≥ –±–æ–ª–æ–Ω –±–æ–æ—Ü–æ–æ–Ω—ã “Ø–Ω–∏–π–Ω –¥“Ø–Ω–≥ —Å–æ–Ω–≥–æ–Ω–æ —É—É.");
      return;
    }

    try {
      const game = games.find(
        (g) => g.teamA.name === selectedTeam || g.teamB.name === selectedTeam
      );
      if (!game) {
        alert("–¢–æ—Ö–∏—Ä–æ—Ö —Ç–æ–≥–ª–æ–æ–º –æ–ª–¥—Å–æ–Ω–≥“Ø–π.");
        return;
      }

      const teamKey = game.teamA.name === selectedTeam ? "teamA" : "teamB";

      const betInput = {
        input: {
          username: name,
          game: gamingId,
          team: teamKey,
          amount: selectedBet,
        },
      };

      await request(endpoint, CREATE_BET, betInput);

      alert("–ë–æ–æ—Ü–æ–æ –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ç–∞–≤–∏–≥–¥–ª–∞–∞!");
      setSelectedTeam("");
      setSelectedBet(null);
      setName("");
      fetchData();
    } catch (error) {
      console.error("–ë–æ–æ—Ü–æ–æ –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
      alert("–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.");
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-r from-blue-50 to-purple-100 flex flex-col items-center gap-6 p-6">
      <div className="text-4xl font-extrabold text-blue-700 mb-2">
        üèÜ –î—ç—ç–¥ –ª–∏–≥–∏–π–Ω –±–æ–æ—Ü–æ–æ
      </div>

      {games.length > 0 && (
        <div className="flex justify-between items-center">
          {games.map((game) => (
            <div
              key={game.id}
              className="flex items-center justify-between gap-4"
            >
              {[
                { team: game.teamA, odd: game.oddA },
                { team: game.teamB, odd: game.oddB },
              ].map(({ team, odd }) => (
                <div
                  key={team.name}
                  className="flex flex-col items-center gap-2"
                >
                  <div
                    onClick={() => setSelectedTeam(team.name)}
                    className={clsx(
                      "w-48 h-48 rounded-xl cursor-pointer flex justify-center items-center text-2xl font-bold shadow transition transform hover:scale-105 bg-center bg-cover",
                      selectedTeam === team.name
                        ? "ring-4 ring-blue-500 text-red-500"
                        : "bg-slate-300 text-black"
                    )}
                    style={{ backgroundImage: `url(${team.image})` }}
                  >
                    {team.name}
                  </div>
                  <div className="flex justify-between w-full text-sm text-gray-600 items-center">
                    <span>{team.name}</span>
                    <span className="text-xl font-bold">{odd}</span>
                  </div>
                </div>
              ))}
            </div>
          ))}
        </div>
      )}

      {games[0] && games[0].isStarted === false ? (
        <>
          <div className="text-center text-lg font-medium text-blue-900">
            ”®–Ω”©”©–¥”©—Ä ‚Ä¢ 19:00 ‚Ä¢ <span className="font-bold">VS</span>
          </div>

          <div className="w-full max-w-md">
            <label className="block mb-1 font-medium text-gray-700 mt-4">
              –ë–æ–æ—Ü–æ–æ —Ç–∞–≤–∏—Ö –¥“Ø–Ω:
            </label>
            <div className="flex flex-wrap gap-3 justify-evenly">
              {mockBets.map((bet, index) => (
                <Button
                  key={index}
                  variant={selectedBet === bet ? "default" : "outline"}
                  onClick={() => setSelectedBet(bet)}
                >
                  {bet.toLocaleString()}‚ÇÆ
                </Button>
              ))}
            </div>
          </div>

          {selectedTeam && selectedBet && (
            <div className="mt-4 text-blue-800 text-sm text-center">
              {name && (
                <div>
                  <strong>{name}</strong> —Ç–∞{" "}
                </div>
              )}
              –¢–∞ <strong>{selectedTeam}</strong> –±–∞–≥—Ç{" "}
              <strong>{selectedBet.toLocaleString()}‚ÇÆ</strong> –±–æ–æ—Ü–æ–æ —Ç–∞–≤–∏—Ö –≥—ç–∂
              –±–∞–π–Ω–∞. <br />
              –•–æ–∂–≤–æ–ª <strong>{winniblePrice?.toLocaleString()}‚ÇÆ</strong> –∞–≤–∞—Ö
              –±–æ–ª–æ–º–∂—Ç–æ–π.
            </div>
          )}
          <div className="w-full max-w-md mt-6">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –¢–∞–Ω—ã –Ω—ç—Ä:
            </label>
            <select
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full px-4 py-2 rounded-xl border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:outline-none shadow-sm text-gray-800"
            >
              <option value="">–ù—ç—Ä—ç—ç —Å–æ–Ω–≥–æ–Ω–æ —É—É</option>
              {allowedNames.map((person) => (
                <option key={person} value={person}>
                  {person}
                </option>
              ))}
            </select>
          </div>

          <Button
            onClick={handleBet}
            className="bg-blue-600 hover:bg-blue-700 text-white mt-4"
          >
            –ë–æ–æ—Ü–æ–æ —Ç–∞–≤–∏—Ö
          </Button>
        </>
      ) : (
        <div>–¢–æ–≥–ª–æ–ª—Ç —ç—Ö—ç–ª—Å—ç–Ω –±–∞–π–Ω–∞</div>
      )}
    </div>
  );
}
